---
title: "RESQUE Profile for `r params$FullName`"
embed-resources: true
output: html
toc: true
params:
  FullName: "Max Mustermann Demoprofile"
  json_path: "/Users/felix/LMU/DGPs Kommission Open Science/RESQUE/Mainz Test 1/resque_linke.json"
---


```{r}
#| include: false

library(knitr)
library(kableExtra)

knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  echo=FALSE,
  message=FALSE,
  warning=FALSE,
  out.width="100%"
)

# Set global chunk options for tables
options(knitr.table.format = "html")

# Set default kableExtra styling options
knit_hooks$set(kable = function(x, options) {
  kable(x, format = "html") %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
})
```

<style>
table, th, td {
  border: 1px solid #BBBBBB;
  border-collapse: collapse;
}
</style>


```{r}
#| results: "asis"

if (is.null(params$json_path)) {
  cat("\n\n::: {.callout-warning}\nNo data supplied - using demo profile\n:::\n\n")
}
```


```{r setup}
library(RESQUER)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(scales)
library(forcats)
library(wordcloud)
library(knitr)
library(openalexR)
library(tibble)
library(OAmetrics)
library(sparkline)

#params$json_path = "/Users/felix/LMU/DGPs Kommission Open Science/RESQUE/Mainz Test 1/resque_leehr.json"

if (is.null(params$json_path)) {
  applicant_json <- read_RESQUE(file=system.file("extdata/demo_profiles/resque_Schoenbrodt.json", package="RESQUER"))
} else {
  applicant_json <- read_RESQUE(file=params$json_path)
}

applicant <- preprocess(applicant=applicant_json)

```

**The "fingerprint" of how research is conducted, when only the best work is submitted.** 
<br>*Analysis from `r as.Date(applicant$meta$date_analysis)`*
<br>*Academic Age: `r applicant$meta$AcademicAge`. Analysis based on `r nrow(applicant$indicators)` publications.*

::: {.callout-note}
This is a preview which shows some visual summaries of the RESQUE indicators. Not all indicators have been covered yet, and things might change substantially.
:::

Some parts of this profile are purely descriptive. For example, it is summarized whether researchers focus on lab or field studies, whether they predominantly work with psychophysiological data or rather focus on questionnaire studies. 

Other parts contain, to some extent, an evaluative aspect: For example, research that is reproducible, which allows independent auditing because it provides open data and scripts is, *ceteris paribus*, better than research that does not have these aspects. Research outputs with these objective quality criteria of methodological rigor can gain "bonus points" which are summed across all provided research outputs and contribute to the [Rigor Profile Overview](#rigor-profile-overview).

::: {.callout-note title="Methods: Is the rigor score systematically biased against certain fields?" collapse="true"}
We took care not to systematically disadvantage certain fields or research styles. Generally, the rigor score is a relative score, computed as “percentage of maximal points” (POMP) score across all indicators that are applicable. For any indicator, one can choose the option "not applicable" if an indicator *principally* cannot be attained by a research output. The points of such non-applicable indicators are removed from the maximum points and therefore do not lower the computed relative rigor score. However, in order to prevent gaming of this scheme, any "not applicable" claim needs to be justified. Only when the justification is accepted by the committee, the point is removed. With no or insufficient justification, in contrast, the indicator is set to "not available" (=0 points) and the maximum points are not adjusted.
:::

## Submitted research outputs

`r nrow(applicant$indicators)` research outputs have been submitted. 

<!--
The following table shows the types of submitted outputs, and whether they have been flagged as suitable for the rating sheet (*yes*) or not (*no*).

```{r}
kable(table(applicant$indicators$type, factor(applicant$indicators$P_Suitable, levels=c("Yes", "No"))))
```

The `r nrow(applicant$indicators[applicant$indicators$type == "Publication", ])` publications had the following types:

```{r}
kable(table(applicant$indicators[applicant$indicators$type == "Publication", "P_TypePublication"]))
```
-->


The `r nrow(applicant$indicators[applicant$indicators$type == "Publication", ])` publications had the following methodological type:

```{r}
dat_tM <- applicant$indicators %>% select(contains("P_TypeMethod"))

# add missing columns
expected_columns<- c(
  P_TypeMethod_EmpiricalQuantitative = FALSE,
  P_TypeMethod_EmpiricalQualitative = FALSE,
  P_TypeMethod_MetaAnalysis = FALSE, 
  P_TypeMethod_Computational = FALSE,
  P_TypeMethod_Theoretical = FALSE, 
  P_TypeMethod_Nonempirical = FALSE,
  P_TypeMethod_OtherMethod = FALSE
)
# adding those columns to df1
dat_tM <- add_column(dat_tM, !!!expected_columns[setdiff(names(expected_columns), names(dat_tM))])

# remove the free text field for this table
dat_tM$P_TypeMethod_Other <- NULL

dat_tM_tab <- pivot_longer(dat_tM, everything()) %>% 
  group_by(name) %>% 
  summarise(paper_count=sum(value, na.rm=TRUE))

dat_tM_tab$name <- str_replace(dat_tM_tab$name, "P_TypeMethod_", "")
dat_tM_tab <- unCamel(df=dat_tM_tab, cname="name")

colnames(dat_tM_tab) <- c("Type of method", "# papers")
kable(dat_tM_tab[dat_tM_tab[, 2] > 0, ])
```


### Team science in publications?

```{r}
#| results: "asis"

cat(paste0(nrow(applicant$all_papers), " out of ", nrow(applicant$pubs), " submitted publications could be automatically retrieved with OpenAlex.\n"))

if (nrow(applicant$all_papers) < nrow(applicant$pubs)) {
  cat('\n::: {.callout-caution collapse="true"}\n
## The following papers could *not* be retrieved by openAlex:\n\n')
  applicant$pubs[!applicant$pubs$doi_links %in% applicant$all_papers$doi, ] %>% 
    select(Title, Year, doi, P_TypePublication) %>% 
    kable() %>% 
    print()

  cat("\n:::\n")
}

applicant$all_papers$n_authors <- sapply(applicant$all_papers$author, nrow)

applicant$all_papers$team_category <- cut(applicant$all_papers$n_authors, breaks=c(0, 1, 5, 15, Inf), labels=c("Single authored", "Small team (<= 5 co-authors)", "Large team (6-15 co-authors)", "Big Team (>= 16 co-authors)"))

team_tab <- table(applicant$all_papers$team_category) |> as.data.frame()
team_tab$perc <- paste0(round(team_tab$Freq*100 / nrow(applicant$all_papers)), "%")
colnames(team_tab) <- c("Team category", "Frequency", "%")
```

```{r}
kable(team_tab, align=c("l", "r", "r"))
```


## Types of research data

The applicant submitted `r sum(applicant$pubs$P_Data == "Yes")` papers with empirical data. 

```{r}
#| results: asis

#applicant$pubs |> select(contains("P_Data_Source"))

get_data_types <- function(selector, headings=c("Data type", "# of papers")) {
  df <- applicant$pubs |> select(contains(selector))

  tab <- data.frame(
    c1 = colnames(df) |> str_replace(selector, ""),
    c2 = apply(df, 2, function(x) sum(!is.na(x)))
  )
  rownames(tab) <- NULL
  colnames(tab) <- headings
  return(tab)
}

# for some reason, you need to explicitly set the table.attr when you use `results: asis`
get_data_types("P_Data_Type_") |> kable(table.attr = "class='table table-sm table-striped small'") 

if (any(applicant$pubs$P_Data_Type_Behavioral, na.rm = TRUE)) {
  cat("\n\n### Types of behavioral data\n\n")
  get_data_types("P_Data_TypeBehavioral_") |> kable(table.attr = "class='table table-sm table-striped small'")  
}
if (any(applicant$pubs$P_Data_Type_Physiological, na.rm = TRUE)) {
  cat("\n\n### Types of physiological data\n\n")
  get_data_types(selector="P_Data_TypePhysiological_") |> kable(table.attr = "class='table table-sm table-striped small'")
}

```


## Types of samples

Type of population/sample and representativeness for the `r sum(applicant$indicators$P_Data_Source_NewOwn)` papers with own new data collection:

```{r}
#| fig-width: 6
#| fig-height: 4
#| out-width: 100%
#| out-height: auto

Sample_Type <- factor(
  x = na.omit(applicant$pubs$P_Sample_Type),
  levels = c("MostlyPsychStudents", "MostlyStudents", "General", "Specific", "Rare"),
  labels = c("(Predominantly) psychology students", 
             "(Predominantly) students, interdisciplinary", 
             "Non-specific general population", 
             "Specific target population (e.g., working nurses)", 
             "Specific target population, hard to acquire (e.g., babies, inmates, rare disorders)")
)



df <- data.frame(
  Sample_Type = Sample_Type, 
  Sample_Representative = factor(na.omit(applicant$pubs$P_Sample_Representative), levels=c("ConvenienceSample", "RepresentativeSample"), labels=c("Convenience Sample", "Representative Sample"))
)


# Count occurrences of each combination
heatmap_data <- df %>%
  count(Sample_Type, Sample_Representative) %>%
  complete(Sample_Type, Sample_Representative, fill = list(n = 0))

ggplot(heatmap_data, aes(x = Sample_Representative, y = Sample_Type, fill = n)) +
  geom_tile() +
  geom_text(aes(label = n), color="#EFEFEF") +  
  scale_fill_gradient(low = "white", high = "#444444") +
  theme_minimal() +
  labs(x = "", y = "") +
  theme(legend.position = "none") +
  scale_y_discrete(limits = rev(levels(df$Sample_Type))) +  # Reverse the order on the y-axis
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```


## Types of population(s)

Type of population for the `r sum(applicant$indicators$P_Data_Source_NewOwn)` papers with own new data collection:

```{r}
#| fig-width: 6
#| fig-height: 3
#| out-width: 80%
#| out-height: auto

Sample_WEIRDness <- factor(
  x = na.omit(applicant$pubs$P_Sample_WEIRD),
  levels = c("WEIRD", "non_WEIRD"),
  labels = c("WEIRD", "non-WEIRD")
)

Sample_CC <- factor(
  x = na.omit(applicant$pubs$P_Sample_CrossCultural),
  levels = c("SingleCulture", "MultipleCultures"),
  labels = c("Single Culture", "Multiple Cultures")
)


df <- data.frame(
  Sample_WEIRDness = Sample_WEIRDness, 
  Sample_CC = Sample_CC
)


# Count occurrences of each combination
heatmap_data <- df %>%
  count(Sample_WEIRDness, Sample_CC) %>%
  complete(Sample_WEIRDness, Sample_CC, fill = list(n = 0))

ggplot(heatmap_data, aes(x = Sample_WEIRDness, y = Sample_CC, fill = n)) +
  geom_tile() +
  geom_text(aes(label = n), color="#EFEFEF") +  
  scale_fill_gradient(low = "white", high = "#444444") +
  theme_minimal() +
  labs(x = "", y = "") +
  theme(legend.position = "none") +
  scale_y_discrete(limits = rev(levels(df$Sample_Type))) +  # Reverse the order on the y-axis
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```



<div id="CRediT-section" style="display: block;">
```{r}
if (all(applicant$credit$Degree == "NoRole")) {
  hideCRediT <- "true"
} else {
  hideCRediT <- "false"
}
```

## Contributorship profile (CRediT roles)

Based on `r nrow(applicant$indicators)` submitted publications, this is the self-reported contributorship profile:

```{r}
#| out.width: 100%
#| fig.width: 8
#| fig.height: 5

credit_barchart(applicant$credit, ordered=FALSE)
```


We categorized papers into levels of involvement, based on the degrees of contributorship:

```{r}

credit_inv_tab <- data.frame(
  "Involvement Level" = c("Very High", "High", "Medium", "Low"),
  "Definition" = c(
    "(>=3 roles as *lead*) OR (>= 5 roles as (*lead* OR *equal*))",
    "(1-2 roles as *lead*) OR (3-4 roles as *equal*)",
    "(1-2 roles as *equal*) OR (>= 5 roles as *support*)",
    "All other combinations"
  )
)

t1 <- table(applicant$indicators$CRediT_involvement) %>% as.data.frame() 

# this is an ugly way of merging ...
credit_inv_tab$Publications <- 0
credit_inv_tab$Publications[1] <- t1[t1$Var1 == "Very High", 2]
credit_inv_tab$Publications[2] <- t1[t1$Var1 == "High", 2]
credit_inv_tab$Publications[3] <- t1[t1$Var1 == "Medium", 2]


kable(credit_inv_tab)
```
</div>
<div id="CRediT-disclaimer" style="display: none;">
<hr>
*[Note: The CRediT profile was omitted as no data is provided.]*
<hr>
</div>


# Indicators of Research Transparency and Reproducibility

```{r}
# sparkline pie chart function. The default colors are grey (for not applicable in the first value slot) and then a color ramp from red to green
sl <- function(values, sliceColors=NA, ...) {
  if (all(is.na(sliceColors))) {
    sliceColors <- c("#EEEEEE", colorRampPalette(c("red", "yellowgreen", "green"))(length(values)-1))
  }
  sparkline(values, type="pie", sliceColors=sliceColors, borderWidth=1, ...)
}

OD <- data.frame(
  notApplicable = sum(applicant$pubs$P_Data_Open == "NotApplicable", na.rm=TRUE),
  No = sum(applicant$pubs$P_Data_Open == "NotAvailable", na.rm=TRUE),
  Partial = sum(applicant$pubs$P_Data_Open == "YesParts", na.rm=TRUE),
  Yes = sum(applicant$pubs$P_Data_Open == "YesEntire", na.rm=TRUE)
  )

OM <- data.frame(
  notApplicable = sum(applicant$pubs$P_OpenMaterials == "NotApplicable", na.rm=TRUE),
  No = sum(applicant$pubs$P_OpenMaterials == "NotAvailable", na.rm=TRUE),
  Partial = sum(applicant$pubs$P_OpenMaterials == "YesParts", na.rm=TRUE),
  Yes = sum(applicant$pubs$P_OpenMaterials == "YesEntire", na.rm=TRUE)
  )

OC <- data.frame(
  notApplicable = sum(applicant$pubs$P_ReproducibleScripts == "NotApplicable", na.rm=TRUE),
  No = sum(applicant$pubs$P_ReproducibleScripts == "NotAvailable", na.rm=TRUE),
  Partial = sum(applicant$pubs$P_ReproducibleScripts == "YesParts", na.rm=TRUE),
  Yes = sum(applicant$pubs$P_ReproducibleScripts == "YesEntire", na.rm=TRUE)
  )

repro <-  data.frame(
  notApplicable = sum(applicant$pubs$P_IndependentVerification == "NotApplicable", na.rm=TRUE),
  No = sum(applicant$pubs$P_IndependentVerification == "No", na.rm=TRUE),
  Workflow = sum(applicant$pubs$P_IndependentVerification == "WorkflowReproducible", na.rm=TRUE),
  Results = sum(applicant$pubs$P_IndependentVerification %in% c("MainResultsReproducible", "AllResultsReproducible"), na.rm=TRUE),
  Replication = sum(applicant$pubs$P_IndependentVerification == "AnalysisReplication", na.rm=TRUE)
  )

applicant$pubs$P_Preregistration2 <- factor(applicant$pubs$P_Preregistration, levels=c("NotApplicable", "No", "Yes", "RegisteredReport"), labels=c("Not Applicable", "Not preregistered", "Preregistration", "Registered Report"))

prereg_tab <- table(applicant$pubs$P_Preregistration2) |> as.data.frame() %>%
  mutate(perc = round(Freq*100/sum(Freq)))

```


## Overview of open research practices

<div style="text-align: center;">

| Open Data Available | Preregistration available | Open Material available | Open Code available | Correctness of computational results has been independently verified
|-|-|-|-|-
| `r sl(OD)`  | `r sl(prereg_tab$Freq, sliceColors=c("#EEEEEE", "red", "#00FF00", "#00FF00"))`| `r sl(OM)` | `r sl(OC)` | `r sl(repro)`  

</div>

*Red = not available; shades of green = available to increasing degree; grey = not applicable*


## Rigor profile overview

::: {.callout-note title="Methods: Computation of the relative rigor score" collapse="true"}
The relative rigor score (RRS) is computed as a “percentage of maximal points” (POMP) score of multiple indicators. The indicators are grouped into four categories: Open Data, Preregistration, Reproducible Code & Verification, and Open Materials. Indicators that are flagged as "not applicable" are removed from the maximum points and therefore do not lower the RRS.
:::

The general philosophy of RESQUE is: It doesn't matter so much what kind of research you do - but when you do it, you should do it in a high quality.
The radar chart with the **Relative Rigor Score** helps you to see how many quality indicators have been fulfilled in multiple areas of methodological rigor.

- The **width** of each sector corresponds to the **maximal number of rigor points** one could gain. If many indicators are flagged as "not applicable", then the maximal points get reduced and the sector gets more narrow.
- The **colored part** of each sector shows the **achieved rigor points**. An entirely grey sector indicates that no rigor points could be awarded at all.
- The quality indicators measure both the *presence* of a practice (e.g., is Open Data available?) and the *quality* of the practice (e.g., is does it have a codebook? Does have a persistent identifier?). Hence, even if the pie charts in the table above show the presence, a lack of quality indicators can lead to a low rigor score.

```{r}
#| fig.width=8

RRS_radarchart(compute_RRS(applicant, sectors="weighted"), base_size=20, overall_score=TRUE)
```



# Scientific impact: Highly popular publications


[BIP! Scholar](https://bip.imsi.athenarc.gr/site/home) (a non-commercial open-source service to facilitate fair researcher assessment) provides **five impact classes** based on norm values:

::: {style="font-size: 80%;"}
| 🚀 Top 0.01% | ️🌟 Top 0.1%  |️✨ Top 1% | Top 10% | Average (Bottom 90%) |
|--------------|--------------|----------|--------|----------------------|
:::


::: {.callout-note title="Methods: Computation of the Popularity metric" collapse="true"}
This indicator reflects impact/attention of an article in the research community at large. It is based on *AttRank*, a variation of PageRank (known from the Google search algorithm) that accounts for the temporal evolution of the citation network. By that, it alleviates the bias against younger publications, which have not had the chance to accumulate a lot of citations. It models a researcher's preference to read papers which received a lot of attention recently. It was evaluated (and vetted) in its performance to predict the ranking of papers concerning their *future impact* (i.e., citations). For more details, see [BIP! glossary](https://bip.imsi.athenarc.gr/site/indicators) and the references therein.
:::

From `r nrow(applicant$indicators)` submitted papers of `r applicant$meta$FullName`, `r nrow(applicant$BIP %>% filter(pop_class <= "C4"))` `r ifelse(nrow(applicant$BIP %>% filter(pop_class <= "C4")) == 1, "was", "were")` in the top 10% popularity class of all papers or better.

::: {style="font-size: 80%;"}
```{r}

pop_sel <- applicant$BIP %>% 
  filter(pop_class <= "C4") %>% 
  arrange(pop_class) %>% 
  select(doi, "three_year_cc", cc,	pop_class)

pop_sel$Label <- factor(pop_sel$pop_class, levels=paste0("C", 1:5), labels=c("Top 0.01%", "Top 0.1%", "Top 1%", "Top 10%", "Average (Bottom 90%)"))
pop_sel$pop_class <- NULL

pop_sel <- pop_sel |> 
  left_join(applicant$indicators %>% select(doi=doi_links, Title = title_links_html, CRediT_involvement, CRediT_involvement_roles), by="doi") %>%
  left_join(applicant$FNCS %>% select(doi=doi, FNCS, FNPR), by="doi") %>%
  relocate(Title) |> 
  relocate(FNCS, .after = cc) |> 
  relocate(FNPR, .after = FNCS)

colnames(pop_sel) <- c("Title", "doi", "3 year citation count", "Overall citation count", "FNCS", "FNPR", "Popularity", "Candidates' CRediT involvement", "Candidates' CRediT main roles")

pop_sel$FNCS <- round(pop_sel$FNCS, 1)
pop_sel$FNPR <- paste0(round(pop_sel$FNPR*100, 1), "%")
pop_sel$doi <- NULL
pop_sel$FNPR <- NULL # removed, because it is not always congruent with the popularity category; could be confusing

# add some emojis:
pop_sel$Title[pop_sel$Popularity == "Top 0.01%"] <- paste0("🚀", pop_sel$Title[pop_sel$Popularity == "Top 0.01%"])
pop_sel$Title[pop_sel$Popularity == "Top 0.1%"] <- paste0("️🌟", pop_sel$Title[pop_sel$Popularity == "Top 0.1%"])
pop_sel$Title[pop_sel$Popularity == "Top 1%"] <- paste0("️✨", pop_sel$Title[pop_sel$Popularity == "Top 1%"])

if (hideCRediT == "true") {
  pop_sel <- pop_sel[, 1:5]
}

if (nrow(pop_sel) > 0) {
  kable(pop_sel, escape = FALSE, table.attr = "class='table table-sm table-striped small' quarto-disable-processing=true") |> 
    footnote(general="FNCS = Field- and age-normalized citation score: This is the factor by which a publication is cited more often than other publications from the same field and the same publication year. A value of 2, for example, indicates that the publication got cited twice as much as comparable publications.")
} else {
}
```
:::






<!--
## Reproducibility

### Correctness of computational results has been independently verified

```{r}
IV <- applicant$indicators %>% 
  filter(!is.na(P_TypeMethod_EmpiricalQuantitative) & P_TypeMethod_EmpiricalQuantitative == TRUE)

```

`r nrow(IV)` papers had empirical data. Of these analysis have been independently verified for computational correctness:

```{r}
#| fig-width: 10
#| fig-height: 4

IV$IV <- factor(IV$P_IndependentVerification, levels=c("NotApplicable", "No", "WorkflowReproducible", "MainResultsReproducible", "AllResultsReproducible", "AnalysisReplication"), labels=c("not applicable", "No", "Workflow/technical repro", "Main results verified", "All results verified", "Independent Reimplementation"))

IV_tab <- table(IV$IV) |> prop.table() |> as.data.frame() %>%
  mutate(perc = round(Freq*100)) %>% 
  filter(perc > 0)

 ggplot(IV_tab, aes(x = "x", y = perc, fill = Var1)) +
  geom_col(width=0.35) +
  scale_y_continuous(expand = expansion(add = c(10, 10))) + 
  scale_fill_manual(values = rev(c("grey80", "indianred1", "darkseagreen1", "darkolivegreen2", "chartreuse2", "green1")), breaks=rev(c("not applicable", "No", "Workflow/technical repro", "Main results verified", "All results verified", "Independent Reimplementation")), guide="none") +
  geom_text(aes(label = paste0(gsub(" ", "\n", Var1), ":\n", round(perc), "%")), position = position_stack(vjust = 0.5), size=6) +
  RESQUER:::theme_singlebar() + coord_flip()
```

-->


<!--

## Preregistration

### Was the research preregistered / a registered report?
```{r}
#| fig-width: 10
#| fig-height: 4

applicant$pubs$P_Preregistration2 <- factor(applicant$pubs$P_Preregistration, levels=c("NotApplicable", "No", "Yes", "RegisteredReport"), labels=c("Not Applicable", "Not preregistered", "Pre- registration", "Registered Report"))

prereg_tab <- table(applicant$pubs$P_Preregistration2) |> as.data.frame() %>%
  mutate(perc = round(Freq*100/sum(Freq)))

# give missing categories a minimal width to make them visible
prereg_tab$perc[prereg_tab$perc == 0] <- 0.2

 ggplot(prereg_tab, aes(x = "x", y = perc, fill = Var1)) +
  ggtitle(paste0("n=", nrow(applicant$pubs), " publications")) +
  geom_col(width=0.35) +
  scale_y_continuous(expand = expansion(add = c(10, 10))) + 
  scale_fill_manual(values = rev(c("grey80", "#FED976", "#90c916", "green4")), breaks=rev(c("Not Applicable", "Not preregistered", "Pre- registration", "Registered Report")), guide="none") +
  geom_text(aes(label = paste0(gsub(" ", "\n", Var1), ":\nn=", Freq, "\n(", round(perc), "%)")), position = position_stack(vjust = 0.5), size=6) +
  RESQUER:::theme_singlebar() + coord_flip()

```

### Replication: The publication contained a preregistered replication attempt (either direct/close or conceptual)
```{r}
#| fig-width: 10
#| fig-height: 4

if (!is.null(applicant$pubs$P_PreregisteredReplication)) {

applicant$pubs$replication <- factor(applicant$pubs$P_PreregisteredReplication, levels=c("NotApplicable", "No", "Yes"), labels=c("not applicable", "No", "Yes"))

# fix some logical dependencies
applicant$pubs$replication[is.na(applicant$pubs$replication) & applicant$pubs$P_Preregistration2 == "Not preregistered"] <- "No"

repl_tab <- table(applicant$pubs$replication) |> as.data.frame() %>%
  mutate(perc = round(Freq*100/sum(Freq))) %>% 
  filter(perc > 0)

 ggplot(repl_tab, aes(x = "x", y = perc, fill = Var1)) +
  ggtitle(paste0("n=", nrow(applicant$pubs), " publications")) +
  geom_col(width=0.35) +
  scale_y_continuous(expand = expansion(add = c(10, 10))) + 
  scale_fill_manual(values = rev(c("#FED976", "#90c916", "grey80")), breaks=rev(c("No", "Yes", "not applicable")), guide="none") +
  geom_text(aes(label = paste0(gsub(" ", "\n", Var1), ":\nn=", Freq, "\n(", round(perc), "%)")), position = position_stack(vjust = 0.5), size=6) +
  RESQUER:::theme_singlebar() + coord_flip()
 
}
```

::: {.callout-note title="The following publications contained preregistered replications:" collapse="true"}

```{r}
kable(applicant$pubs %>% 
  filter(P_PreregisteredReplication == "Yes") %>% 
  select(TitleLink, Year)
)
```
:::



### What has been preregistered?

```{r}
prereg_pubs <- applicant$pubs[applicant$pubs$P_Preregistration %in% c("Yes", "RegisteredReport"), ]

prereg_content <- prereg_pubs %>% select(contains("P_Preregistration_Content"))

# add missing columns
expected_columns<- c(
  P_Preregistration_Content_SampleSizePlanning = FALSE,
  P_Preregistration_Content_Hypotheses = FALSE, 
  P_Preregistration_Content_Operationalizations = FALSE, 
  P_Preregistration_Content_AnalysisPlan = FALSE

)
# adding those columns to df1
prereg_content <- add_column(prereg_content, !!!expected_columns[setdiff(names(expected_columns), names(prereg_content))])

prereg_content_tab <- pivot_longer(prereg_content, everything()) %>% 
  group_by(name) %>% 
  summarise(preregs=sum(value)) %>% 
  mutate(preregs = preregs/nrow(prereg_content))

prereg_content_tab$name <- str_replace(prereg_content_tab$name, "P_Preregistration_Content_", "")
prereg_content_tab <- unCamel(prereg_content_tab, "name")
```

`r nrow(prereg_pubs)` of `r nrow(applicant$pubs)` eligible publications had preregistrations. The following components have been preregistered (relative to `r nrow(prereg_pubs)` preregistrations):

```{r}
# TODO: Print percentages for y axis, remove legend
ggplot(prereg_content_tab, aes(x=name, y=preregs, fill=name)) + geom_bar(stat="identity") + coord_flip()
```



# "Not applicable" justifications

Choosing "not applicable" indicates that an indicator *principally* cannot be attained by a research output. To avoid bias against certain research fields, the points of such non-applicable indicators are removed from the maximum points and therefore do not lower the computed relative rigor score. However, in order to prevent gaming of this scheme, any "not applicable" claim needs to be justified. Only when the justification is accepted by the committee, the point is removed. With no or insufficent justification, in contrast, the indicator is set to "not available" (=0 points) and the maximum points are not adjusted.


```{r}
#| results='asis'

# cols with "NotApplicable"
cols_with_NotApplicable <- apply(applicant$indicators, 2, function(col) any(col == "NotApplicable")) |> na.omit()
colnames_with_NotApplicable <- names(cols_with_NotApplicable)[cols_with_NotApplicable == TRUE]

# remove one field: P_MultiStudy has no explanation if "not applicable" is selected
colnames_with_NotApplicable <- colnames_with_NotApplicable[colnames_with_NotApplicable != "P_MultiStudy"]

if (length(colnames_with_NotApplicable) > 0) {
  cat("These are all claims of non-applicability from this applicant:\n\n")
  
  for (i in colnames_with_NotApplicable) {
    # add corresponding explanation
    cat(paste0("### ", i, "\n\n"))
    
    NotAppl <- applicant$indicators[applicant$indicators[, i] == "NotApplicable", c("Title", "Year", "DOI", i, paste0(i, "_NAExplanation"))]
    NotAppl <- NotAppl[!is.na(NotAppl[, i]), ]
    rownames(NotAppl) <- NULL
    
    NotAppl$Title <- paste0("[", NotAppl$Title, "](", NotAppl$DOI, ")")
    NotAppl$DOI <- NULL
    
    # beware: within for-loops, kable() needs an explicit `print`
    print(kable(NotAppl))
  }
} else {
  cat("**The applicant had no claims of non-applicability.**\n\n")
}
```

```{r}
#| results='asis'


# Two extra explanations: 
# (1) P_Suitable_Explanation 
# -> general opt-out of this research output
# (2) P_Data_Open_AccessLevel_ZK2Explanation
# -> Justification for restricted access (ZK2)

if (all(c("P_Suitable", "P_Suitable_Explanation") %in% colnames(applicant$indicators))) {
  P_Suitable_tab <- applicant$indicators %>% 
    select(Title0=Title, Year, DOI, P_Suitable, P_Suitable_Explanation)
    
  P_Suitable_tab$Title <- paste0("[", P_Suitable_tab$Title, "](", P_Suitable_tab$DOI, ")")

  P_Suitable_tab <- P_Suitable_tab %>% 
    filter(P_Suitable == "No") %>% 
    select(Title, Year, P_Suitable, P_Suitable_Explanation)

  cat("### 'This output is generally not suitable for the assessment scheme'\n")
  kable(P_Suitable_tab)
}

if (all(c("P_Data_Open_AccessLevel", "P_Data_Open_AccessLevel_ZK2Explanation") %in% colnames(applicant$indicators))) {
  # TODO: Show table
  applicant$indicators[, c("P_Data_Open_AccessLevel", "P_Data_Open_AccessLevel_ZK2Explanation")]

  cat("\n\n### Justification for open data access level >= 2")
  #kable(P_Suitable_tab)

  print("WARNING: Not implemented yet")
}

```

-->





<!-- JS scripts to conditionally hide sections -->

```{=html}
<script> // This JavaScript will run after the page loads 
document.addEventListener("DOMContentLoaded", function() { 
  var hideCRediT = `r hideCRediT`; // Embed R variable in JS 
  if (hideCRediT) { 
    document.getElementById("CRediT-section").style.display = "none"; 
    document.getElementById("CRediT-disclaimer").style.display = "block"; 
  }
}
); 
</script>
```
