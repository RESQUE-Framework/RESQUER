---
title: "RESQUE Overview for multiple candidates"
embed-resources: true
output: html
format:
  html:
    toc: true
    toc-location: left
    df-print: paged
    css: overview_styles.css
    page-layout: full
    grid:
      sidebar-width: 250px
      body-width: 900px
      margin-width: 100px
      gutter-width: 1.5rem
params:
  json_path: "/Users/felix/LMU/DGPs Kommission Open Science/RESQUE/Overview"
  clear_cache: false
---

```{r setup0}
#| include: false

library(knitr)
library(kableExtra)
library(RESQUER)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(scales)
library(forcats)
library(wordcloud)
library(openalexR)
library(tibble)
library(OAmetrics)
library(sparkline)

RED <- "#e4090c"
DARKRED <- "#c51819"
YELLOW <- "#f7cf07"
GREEN <- "#3af72c"
DARKGREEN <- "#1da412"
LIGHTGREY <- "#e8e8e8"

#* @param value 1 (=red), 2 (=yellow) or 3 (=green)
dot <- function(value) {
  color_map <- c(RED, YELLOW, GREEN)
  # Retrieve the corresponding color for each value
  colors <- color_map[as.integer(value)]
  paste0('<span style="color:', colors, '">&#9679;</span>')
}

cut2 <- function(x, breaks) {
  if (length(breaks) != 2) {
    stop("In cut2(), you need exactly two breaks to get a traffic light rating.")
  } else {
    cut(x, c(-Inf, breaks, Inf), labels=FALSE)
  }
}

knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  echo=FALSE,
  message=FALSE,
  warning=FALSE,
  out.width="100%"
)

# Set global chunk options for tables
options(knitr.table.format = "html")

# Set default kableExtra styling options
knit_hooks$set(kable = function(x, options) {
  kable(x, format = "html") %>%
    kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE)
})
```


```{r normvalues}
RRS_norms <- c(.25, .40)
OD_norms <- c(.25, .40)
OM_norms <- c(.4, .6)
PreReg_norms <- c(.1, .2)
Repro_norms <- c(.2, .3)
Theory_norms <- c(.1, .2)
```


```{r setup}
#| results: "asis"


#params$json_path = "/Users/felix/LMU/DGPs Kommission Open Science/RESQUE/Overview"

if (is.null(params$json_path)) {
  # TODO: Load demo profiles if no folder with jsons is provided
  #applicant_json <- read_RESQUE(file=system.file("extdata/demo_profiles/resque_Schoenbrodt.json", package="RESQUER"))
} else {
  
  cache_file <- paste0(params$json_path, "/applicant_data.RData")
  
  # Check if a cached, pre-computed file exists
  if (file.exists(cache_file)) {
    load(cache_file)
    cat(paste0("::: {.callout-note title='Using cached results (date of analysis: ", format(store$date_analysis, tz = "UTC", usetz = TRUE), ")'}\n:::\n\n"))
    
  } else {
    # Read all jsons in that folder
    json_files <- list.files(params$json_path, pattern="*.json", full.names=TRUE)
    
    applicant_list <- list()
    
    for (i in 1:length(json_files)) {
        R <- read_RESQUE(file=json_files[i], verbose=FALSE)
        applicant_list[[i]] <- preprocess(applicant=R, verbose=FALSE)
    }
    
    # `store` stores more meta-information on the analysis
    store <- list(
      date_analysis = Sys.time()
    )
    
    save(applicant_list, store, file=cache_file)
  }
  
}

```


## Applicant descriptives

```{r descriptive_tab}

overview_tab <- data.frame(
  names = sapply(applicant_list, function(x) x$meta$LastName),
  academic_age = sapply(applicant_list, function(x) x$meta$AcademicAge),
  analysed_outputs = sapply(applicant_list, function(x) x$pubs |> nrow())
)

kable(overview_tab, col.names = c("Name", "Academic age", "# of analysed publications"), escape = TRUE) %>% 
  kable_styling(font_size = 9, bootstrap_options = c("hover", "condensed"), full_width = FALSE) %>% 
  row_spec(1:nrow(overview_tab), extra_css = "padding-top:1px; padding-bottom:1px;")

# TODO: Add note: Academic age is since PhD, minus self-reported times for childcare etc.
```


## Research Transparency

You can click on the arrows in each column header (<img src="img/DT_arrows.png" />) to sort by the Rigor Score of the column.

The Overall Rigor Score covers current best practices, which often are not used broadly yet in the community. Therefore the scores might look meager, even for very good papers. Tentative norm values for the overall rigor score, based on some first evaluation studies are:

  - 15-20% can be considered average
  - 30% is very good
  - \>40% is excellent.

::: {.callout-note collapse="true" title="How to read the small charts"}

- *Quantity of openness*: How *often* did they do it?<br>Each small square represents one publication, where the open practice (e.g., open data) has been performed (<span style="width: 10px; height: 10px; background-color: `r DARKGREEN`; display: inline-block;"></span>), *not* performed (<span style="width: 10px; height: 10px; background-color: `r DARKRED`; display: inline-block;"></span>), or was not applicable (<span style="width: 10px; height: 10px; background-color: `r LIGHTGREY`; display: inline-block;"></span>). \
- *Quality of openness*: How *well* did they do it?<br>The colors of the bar below the squares are based on normative values of the Relative Rigor Score (i.e., "What quality of a practice could reasonably be expected in that field?").

![](img/Overview_chart_explanation1.png)
:::

```{r overview_table2b}
library(htmltools)
library(DT)

tab2b <- data.frame(
  applicant = overview_tab$names
  )

tab2b$RRS_overall = sapply(applicant_list, function(x) {
  sum(x$RRS$sector_scores$scores[1:4]) / sum(x$RRS$sector_scores$max_points[1:4])
})
tab2b$RRS_OD = sapply(applicant_list, function(x) x$RRS$sector_scores %>% filter(category == "Open Data") %>% pull(rel_score))
tab2b$RRS_OM = sapply(applicant_list, function(x) x$RRS$sector_scores %>% filter(category == "Open Materials") %>% pull(rel_score))
tab2b$RRS_OC = sapply(applicant_list, function(x) x$RRS$sector_scores %>% filter(category == "Reproducible Code \n& Verification") %>% pull(rel_score))
tab2b$RRS_PreReg = sapply(applicant_list, function(x) x$RRS$sector_scores %>% filter(category == "Preregistration") %>% pull(rel_score))

tab2b[, "Overall Rigor"] <- NA
for (i in 1:nrow(tab2b)) {
  RRS_vec <- c(
    tab2b$RRS_OD[i],
    tab2b$RRS_OM[i],
    tab2b$RRS_OC[i],
    tab2b$RRS_PreReg[i]) |> sort(decreasing=FALSE)
  tab2b[i, "Overall Rigor"] <- circle_layer_html(tab2b$RRS_overall[i], get_color(RRS_vec), outer_width = 60)
}


tab2b[, "Open Data"] <- paste(
  lapply(applicant_list, function(x) {x$OS_pie$OpenData[c("Yes", "Partial", "No", "notApplicable")] |> unlist()}) |> sapply(waffle_html),
  sapply(tab2b$RRS_OD, ministack_html, height=14)
)

tab2b[, "Open Material"] <- paste(
  lapply(applicant_list, function(x) {x$OS_pie$OpenMaterial[c("Yes", "Partial", "No", "notApplicable")] |> unlist()}) |> sapply(waffle_html),
  sapply(tab2b$RRS_OM, ministack_html, height=14)
)

tab2b[, "Reproducible Code \n& Verification"] <- paste(
  lapply(applicant_list, function(x) {x$OS_pie$OpenCode[c("Yes", "Partial", "No", "notApplicable")] |> unlist()}) |> sapply(waffle_html),
  sapply(tab2b$RRS_OC, ministack_html, height=14)
)

tab2b[, "Preregistration"] <- paste(
  lapply(applicant_list, function(x) {x$OS_pie$Prereg[c("Registered Report", "Preregistration", "Not preregistered", "Not Applicable")] |> unlist()}) |> sapply(waffle_html),
  sapply(tab2b$RRS_PreReg, ministack_html, height=14)
)

# dom = 't', # Removes "Show X entries" and search bar
# The RRS_* columns are needed for sorting, but should not be displayed
datatable(
  tab2b, 
  escape=FALSE, 
  options = list(
    pageLength = 5, 
    autoWidth = TRUE, 
    dom = 't', 
    paging = FALSE,
    columnDefs = list(
      list(targets = "Overall Rigor", orderData = 2),
      list(targets = "Open Data", orderData = 3),
      list(targets = "Open Material", orderData = 4),
      list(targets = "Reproducible Code \n& Verification", orderData = 5),  # Sort OC by RRS_OC (which is the 5th column)
      list(targets = "Preregistration", orderData = 6),
      list (targets = c(2:6), visible = FALSE) # Hide numeric sorting columns
    ))
)
```


## Impact

```{r}
tab_impact <- data.frame(
  applicant = overview_tab$names
)

tab_impact$BIP_n_papers_top10 = sapply(applicant_list, function(x) x$BIP_n_papers_top10)

tab_impact$mean_FNCS = sapply(applicant_list, function(x) mean(x$FNCS$FNCS, na.rm=TRUE) |> round(0))

tab_impact$highest_citation_count = sapply(applicant_list, function(x) max(x$FNCS$cited_by_count, na.rm=TRUE))


# dom = 't', # Removes "Show X entries" and search bar
# The RRS_* columns are needed for sorting, but should not be displayed
datatable(
  tab_impact, 
  escape=FALSE, 
  options = list(
    pageLength = 5, 
    autoWidth = TRUE, 
    dom = 't', 
    paging = FALSE),
  colnames=c("Applicant", "# of papers in top 10% of all cited papers", "mean FNCS")
)
```


## Internationality & Interdisciplinarity

```{r inter_tab}

tab4 <- data.frame(
  applicant = overview_tab$names,
  inter1 = slider(
      sapply(applicant_list, function(x) x$internationalization$international_evenness), 
      "Only within country co-authors", "Broad coauthor network from many countries"
  ),
  inter2 = slider(
    sapply(applicant_list, function(x) x$interdisciplinarity$interdisc_evenness), 
      "Single discipline", "Many disciplines"
  )
)

kable(tab4, col.names=c("Applicant", "<span style='font-size:80%;'>Only within country co-authors</span>Internationality", "Interdisciplinarity"), escape=FALSE)
```






## Session info

`r paste0("*Analysis date: ", format(Sys.time(), tz = "UTC", usetz = TRUE) |> as.character(), ". RESQUER package version: ", packageVersion("RESQUER") |> as.character(), "; Version of overview sheet: 0.1.0*")`
