--- 
title: "RESQUE Profile"
format: 
  dashboard:
    theme: 
      - lumen
      - custom.scss
    nav-buttons:
      - icon: github
        href: https://github.com/nicebread/RESQUE
server: shiny
---

<!-- See https://spencerschien.info/post/r_for_nonprofits/quarto_template/ -->

```{r setup}
#| context: setup
#| include: false

# TODO: ggf. "Software" string anpassen
required_json_version <- data.frame(
  type=c("Publication", "Data", "Software"),
  required_version = c("0.3.0", "0.1", "0.1")
)

library(RESQUER)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(scales)
library(forcats)
library(wordcloud)
library(knitr)
library(openalexR)
library(tibble)
library(kableExtra)
library(bslib)
library(bsicons)
library(plotly)
library(shiny)
library(shinyalert)
library(lubridate)
library(DT)
library(gt)
library(purrr)
library(OAmetrics)

# R <- read_RESQUE(file="/Users/felix/LMU/Reviews/ZPID/W1 Professur 2024/RESQUE/resque_Jansen2.json")

# TODO: Read all files in folder; let users select the folder via dialog box
  json_folder <- "/Users/felix/Documents/Github/RESQUE/profile/data"
  #json_folder <- "/Users/felix/Documents/Gitlab/resque-ratings/json"
  
  json_files <- list.files(json_folder, pattern="*.json", full.names=TRUE)
  
  applicant_list <- list()
  applicant_names <- c()
  version_mismatch <- c()
  version_df <- data.frame()
  for (i in 1:length(json_files)) {
    print(paste0("Preprocessing candidate ", i, "/", length(json_files)))
    R <- read_RESQUE(file=json_files[i])
    applicant_list[[i]] <- preprocess(applicant=R)
    applicant_names[i] <- applicant_list[[i]]$meta$FullName

    version_df0 <- cbind(
          applicant_list[[i]]$meta$FullName,
          merge(applicant_list[[i]]$indicators[, c("type", "version")], required_json_version, by="type")
        )
    version_df <- rbind(version_df, version_df0)
        
    version_mismatch[i] <- any(version_df0$version != version_df$required_version)
  }
  applicant_position <- applicant_ID <- 1:length(json_files)
  names(applicant_position) <- applicant_names
  names(applicant_ID) <- applicant_ID

  
  #applicant <- function(x=2) applicant_list[[x]]
  
  x <- sapply(applicant_list, "[", "meta")
  fullmeta <- bind_rows(x)
  
  RRS_overall_score <- sapply(applicant_list, "[", "RRS") |> sapply("[", "overall_score") |> unlist()
  
  # create overview table (this is the static version; overview_tab2() is reactive and gets updated)
  overview_tab <- data.frame(
    "Last Name" = fullmeta$LastName,
    "First Name" = fullmeta$FirstName,
    "Year PhD" = fullmeta$YearPhD,
    "Academic Age" = fullmeta$AcademicAge,
    "RRS" = RRS_overall_score |> round(2),
    "RRS_Chart" = 1:nrow(fullmeta) # add the candidate index to the table (this is replaced by the mini plot)
  )
```

<!-- How to include in package: See https://spencerschien.info/post/r_for_nonprofits/quarto_template/ -->

# {.toolbar}

```{r}
checkboxInput(inputId="all_anonymous", "Make anonymous", value = TRUE)

if (length(applicant_list) <= 8) {
  radioButtons(inputId='applicant_name', label='Name of applicant', choices=applicant_position, selected=1, inline=TRUE)
} else {
  selectInput(inputId='applicant_name', label='Name of applicant', choices=applicant_position, selected=1)
}  
```

```{r}
#| context: server

  if (any(version_mismatch)) {
    print(paste0("Version mismatch:"))
    print(version_df)
    shinyalert(
    title = "Version mismatch",
    text = paste0("Warning: The following applicants had a wrong version: ", paste0(applicant_names[version_mismatch], collapse=", ")),
    size = "xs", 
    closeOnEsc = TRUE,
    closeOnClickOutside = TRUE,
    html = FALSE, type = "warning",
    showConfirmButton = TRUE,
    showCancelButton = FALSE,
    confirmButtonText = "OK",
    confirmButtonCol = "#AEDEF4",
    animation = TRUE
  )
  }

applicant <- reactive({
  applicant_list[[as.numeric(input$applicant_name)]]
})

overview_tab2 <- reactive({
  ot2 <- overview_tab
  if (input$all_anonymous == TRUE) {
    ot2[, 1] <- "- redacted -"
    ot2[, 2] <- "- redacted -"
  }
  return(ot2)
})

observeEvent(input$all_anonymous, {
 if (input$all_anonymous == TRUE) {
  updateRadioButtons(inputId = "applicant_name", label='Applicant ID: ', choices = applicant_ID, inline=TRUE) 
 } else {
   updateRadioButtons(inputId = "applicant_name", label='Name of applicant: ', choices = applicant_position, inline=TRUE)
 }

})
```


# Overview {orientation="columns"}

```{r}
#| context: server
#output$overview_table_output <- renderDT(overview_tab)

# see https://rfortherestofus.com/2023/10/ggplots-in-gt-tables

RRS_miniplot <- function(x) {
  x <- as.numeric(x)
  if (!is.null(x)) {
    RRS_radarchart(applicant_list[[x]]$RRS, minimal=TRUE)
  } else {
    print("Skipping")
  }
}

gt_tbl <- reactive({
  gt_table <- 
  overview_tab2() |>
  gt() |> 
  opt_interactive(use_compact_mode = TRUE)

# now tell gt to transform the index column into the corresponding RRS plot
gt_table <- gt_table |> 
  text_transform(
    locations = cells_body(columns = 'RRS_Chart'),
    fn = function(column) {
      map(column, RRS_miniplot) |>
        ggplot_image(height = px(50))
    }
  ) 
})

output$overview_table_output <- render_gt(gt_tbl())
```
```{r}
#| fill: false
gt_output(outputId = "overview_table_output")
```

# Candidate Summary {orientation="columns"}

## Column1 {width=30%}

```{r vb_yearPhD}
#| context: server
output$vb_YearPhD <- function(){applicant()$meta$YearPhD}
```
```{r vb_yearPhD_output}
value_box(
  title = "Year of PhD:",
  value = textOutput("vb_YearPhD"),
  showcase = bs_icon("mortarboard")
)
```


```{r vb_academicAge}
#| context: server

this_year <- year(Sys.Date())
output$vb_academicAge <- function(){applicant()$meta$AcademicAge}
```
```{r vb_academicAge_output}
value_box(
  title = "Academic Age:",
  value = textOutput("vb_academicAge"),
  showcase = bs_icon("calendar4-week")
)
```

```{r vb_topFactor}
#| context: server
output$vb_topFactor <- function(){mean(applicant()$TOP_journals$Total, na.rm=TRUE) |> round()}
```
```{r vb_topFactor_output}
value_box(
  title = "Average Top Factor (max=30):",
  value = textOutput("vb_topFactor"),
  showcase = bs_icon("transparency")
)
```


## Column2 RRS Radar chart {width=70%}

How to read the chart:

```{r RRS_radarchart_input}
#| content: card-toolbar
checkboxInput(inputId="RRS_overall_score", "Show overall score?", value = FALSE)
checkboxInput(inputId="sectors_type", "Weighted sectors?", value = TRUE)
```
```{r RRS_radarchart}
#| context: server

output$RRS_radarchart <- renderPlot({
  RRS_radarchart(compute_RRS(applicant(), sectors=ifelse(input$sectors_type, "weighted", "equal")), base_size=20, overall_score=input$RRS_overall_score)
})
```
```{r RRS_radarchart_plot, out.width="100%", fig.width = 8, fig.height = 5}
plotOutput("RRS_radarchart")
```


# Submitted works {orientation="columns"}

## Column1 {width=30%}

### Row {height=45%}
::: {.card title="Type of method"}
```{r types_of_papers}
#| context: server

output$Type_of_method_tab <- function(){
  dat_tM <- applicant()$indicators %>% select(contains("P_TypeMethod"))

  # add missing columns
  expected_columns<- c(
    P_TypeMethod_Empirical = FALSE,
    P_TypeMethod_MetaAnalysis = FALSE, 
    P_TypeMethod_Theoretical = FALSE, 
    P_TypeMethod_Simulation = FALSE,
    P_TypeMethod_OtherMethod = FALSE
  )
  # adding those columns to df1
  dat_tM <- add_column(dat_tM, !!!expected_columns[setdiff(names(expected_columns), names(dat_tM))])
  
  # remove the free text field for this table
  dat_tM$P_TypeMethod_Other <- NULL
  
  dat_tM_tab <- pivot_longer(dat_tM, everything()) %>% 
    group_by(name) %>% 
    summarise(paper_count=sum(value, na.rm=TRUE))
  
  dat_tM_tab$name <- str_replace(dat_tM_tab$name, "P_TypeMethod_", "")
  dat_tM_tab <- unCamel(df=dat_tM_tab, cname="name")
  
  colnames(dat_tM_tab) <- c("Type of method", "# papers")

  kable(dat_tM_tab, "html") %>%
    kable_styling(font_size = 14, bootstrap_options = c("striped", "hover"))
}
```

```{r}
tableOutput('Type_of_method_tab')
```
:::


### Row Journal List {height=55%}
::: {.card title="Journals where the author published"}
::: {style="font-size: 80%;"}
<!-- TODO: Add infobox: According to [CoARA Commitment 3](https://coara.eu/agreement/the-commitments/), research outputs should neither be assessed based on the journal where it was published, nor on metrics relating to the publication venue: -->

```{r vb_topFactor_text}
#| context: server
output$vb_topFactor_text <- function(){paste0("The journal list allows a judgement of the field and the relevancy of the author's publication profile for the position. Journals are ordered by frequency and then alphabetically. The average TOP factor was ",
mean(applicant()$TOP_journals$Total, na.rm=TRUE) |> round(), ".")}
```
```{r vb_topFactor_text_output}
textOutput('vb_topFactor_text')
```

```{r journal_list}
#| context: server

output$journal_list_output <- function(){
  jt <- table(applicant()$all_papers$so)
  jt2 <- jt[order(jt, names(jt))]
  journal_list <- paste0(names(jt2), collapse=", ")
  journal_list
}
```
```{r}
textOutput('journal_list_output')
```
:::
:::




## Col2: Ref_table {width=70%} 

### Row {height=20% .fill}
::: {.card title="Submitted works"}
::: {style="font-size: 80%;"}
- Author order has been re-arranged to be alphabetical. Please infer the author's contributions from the CRediT taxonomy.
- Journal names have been removed.
- ⭐️ = selected as one of the best works.
:::
:::

### Row {height=80%}
```{r}
#| context: server

output$ref_table_output <- function(){
  outtab <- applicant()$ref_table
  
  if (input$all_anonymous == TRUE) {
    kable(outtab[, -2], format = "html", escape = FALSE, table.attr = "quarto-disable-processing=true") %>% 
    column_spec(1, width = "40%") %>% 
    column_spec(2, width = "20%") %>% 
    column_spec(3, width = "40%") %>% 
    kable_styling(font_size = 12, bootstrap_options = c("striped", "hover"))
  } else {
    # Disable Quarto post-processing for this table
  # (otherwise column_spec does not work)
  kable(outtab, format = "html", escape = FALSE, table.attr = "quarto-disable-processing=true") %>% 
    column_spec(1, width = "25%") %>% 
    column_spec(2, width = "25%") %>% 
    column_spec(3, width = "10%") %>% 
    column_spec(4, width = "40%") %>%
    kable_styling(font_size = 12, bootstrap_options = c("striped", "hover"))
  }
  
  
}
```
```{r}
#| fill: false
tableOutput('ref_table_output')
```


# Author contributions {orientation="columns"}

## Column1 team_science {width=40%}

::: {.card title="Type of collaboration"}
```{r team_science}
#| context: server

output$team_science_output <- function(){
  team_tab <- table(applicant()$all_papers$team_category) |> as.data.frame()
  team_tab$perc <- paste0(round(team_tab$Freq*100 / nrow(applicant()$all_papers)), "%")
  colnames(team_tab) <- c("Team category", "Frequency", "%")
  kable(team_tab, align=c("l", "r", "r")) %>%
    kable_styling(font_size = 14, bootstrap_options = c("striped", "hover"))
}
```
```{r}
tableOutput('team_science_output')
```
:::


::: {.card title="Level of involvement"}

We categorized papers into levels of involvement, based on the degrees of contributorship:

```{r credit_inv_tab}
#| context: server

credit_inv_tab <- data.frame(
  "Involvement Level" = c("Very High", "High", "Medium", "Low"),
  "Definition" = c(
    "(>=3 roles as <i>lead</i>) OR (>= 5 roles as (<i>lead</i> OR <i>equal*))",
    "(1-2 roles as <i>lead</i>) OR (3-4 roles as <i>equal</i>)",
    "(1-2 roles as <i>equal</i>) OR (>= 5 roles as <i>support</i>)",
    "All other combinations"
  )
)

output$credit_inv_table <- function(){
  t1 <- table(applicant()$indicators$CRediT_involvement) %>% as.data.frame() 
  
  # this is an ugly way of merging ...
  credit_inv_tab$Publications <- 0
  credit_inv_tab$Publications[1] <- t1[t1$Var1 == "Very High", 2]
  credit_inv_tab$Publications[2] <- t1[t1$Var1 == "High", 2]
  credit_inv_tab$Publications[3] <- t1[t1$Var1 == "Medium", 2]
  
  
  kable(credit_inv_tab, escape=FALSE) %>%
    kable_styling(font_size = 14, bootstrap_options = c("striped", "hover"))
}
```
```{r credit_inv_tab_output}
tableOutput("credit_inv_table")
```
:::


## Column2 credit_barchart {height=60%}

### Column {.tabset}

```{r credit_barchart}
#| context: server

# TODO: Keep standard order
output$credit_barchart <- renderPlot({
  dat <- applicant()$credit
  p <- ggplot(dat, aes(x = Role, fill = Degree)) +
      geom_bar(stat = "count") +
      coord_flip() +
      scale_fill_manual(values = rev(c("grey90", "indianred1", "khaki2", "green3", "green4")), breaks = rev(c("not applicable", "NoRole", "Support", "Equal", "Lead"))) +
      theme_minimal() + xlab("") + ylab("# of publications") + 
      theme(axis.text.y = element_text(size = 14)) + 
      # force whole integers on x-axis
      scale_y_continuous(breaks = function(x) seq(floor(min(x)), ceiling(max(x)), by = 1))
  
  p
})
```
```{r credit_barchart_plot, out.width="100%", fig.width = 8, fig.height = 5}
#| title: CRediT Barchart
plotOutput('credit_barchart')
```

```{r credit_wordcloud}
#| context: server

output$credit_wordcloud <- renderPlot({
  if (any(applicant()$credit_ordered$weight > 0)) {
    wordcloud(applicant()$credit_ordered$Role, freq = applicant()$credit_ordered$weight, scale = c(2, .1), min.freq = 0.4, random.order = FALSE)  
  }
})
```
```{r credit_wordcloud_plot}
#| title: CRediT Word Cloud
plotOutput('credit_wordcloud')
```





# Impact {orientation="columns"}

## Column1 HI-Papers {width=30%}

### Row1 VB_impact_papers {height=20%}
```{r vb_impact_papers}
#| context: server
output$vb_impact_papers <- function(){
  paste0(applicant()$BIP_n_papers_top10, "/", applicant()$BIP_n_papers)
}
```
```{r vb_impact_papers_output}
value_box(
  title = "Highly impactful papers:",
  value = textOutput("vb_impact_papers"),
  showcase = bs_icon("rocket-takeoff")
)
```


### Row2 Info {height=80%}

```{r}
#| context: server

output$HI_text <- function(){
  paste0("From ", applicant()$BIP_n_papers, " papers of ", applicant()$meta$FullName, " that could be retrieved in the BIP! database, ", applicant()$BIP_n_papers_top10, ifelse(applicant()$BIP_n_papers_top10 == 1, " was ", " were "), "in the top 10% popularity class of all papers or better.")
}
```


::: {.card title="Research impact: Highly popular publications"}
[BIP! Scholar](https://bip.imsi.athenarc.gr/site/home) (a non-commercial open-source service to facilitate fair researcher assessment) provides impact scores for publications. It provides **five impact classes** based on norm values:

::: {style="font-size: 80%;"}
- Top 0.01%           
- Top 0.1%            
- Top 1%              
- Top 10%             
- Average (Bottom 90%)
:::

Here, we consider the **Popularity** measure. 

```{r}
textOutput("HI_text")
```

::: {.callout-note title="Computation of the Popularity metric" collapse="true"}
This indicator reflects impact/attention of an article in the research community at large. It is based on *AttRank*, a variation of PageRank (known from the Google search algorithm) that accounts for the temporal evolution of the citation network. By that, it alleviates the bias against younger publications, which have not had the chance to accumulate a lot of citations. It models a researcher's preference to read papers which received a lot of attention recently. It was evaluated (and vetted) in its performance to predict the ranking of papers concerning their *future impact* (i.e., citations). For more details, see [BIP! glossary](https://bip.imsi.athenarc.gr/site/indicators) and the references therein.
:::
:::



## Column2 HI-Table {width=70%}

```{r}
#| context: server

output$HI_papers_table <- function(){

pop_sel <- applicant()$BIP %>% 
  filter(pop_class <= "C4") %>% 
  arrange(pop_class, -three_year_cc) %>% 
  select(doi, three_year_cc, cc,	pop_class)

pop_sel$Label <- factor(pop_sel$pop_class, levels=paste0("C", 1:5), labels=c("Top 0.01%", "Top 0.1%", "Top 1%", "Top 10%", "Average (Bottom 90%)"))
pop_sel$pop_class <- NULL

pop_sel <- left_join(pop_sel, applicant()$indicators %>% select(doi=dois_normalized, Title, CRediT_involvement, CRediT_involvement_roles), by="doi") %>% 
  relocate(Title)

colnames(pop_sel) <- c("Title", "doi", "3 year citation count", "Overall citation count", "Popularity", "Candidates' CRediT involvement", "Candidates' CRediT main roles")

pop_sel$doi <- NULL

# add some emojis:
pop_sel$Title[pop_sel$Popularity == "Top 0.01%"] <- paste0("🚀", pop_sel$Title[pop_sel$Popularity == "Top 0.01%"])
pop_sel$Title[pop_sel$Popularity == "Top 0.1%"] <- paste0("🔥", pop_sel$Title[pop_sel$Popularity == "Top 0.1%"])
pop_sel$Title[pop_sel$Popularity == "Top 1%"] <- paste0("️✨", pop_sel$Title[pop_sel$Popularity == "Top 1%"])

if (nrow(pop_sel) > 0) {
  kable(pop_sel, format = "html", escape = FALSE) %>%
    kable_styling(font_size = 12, bootstrap_options = c("striped", "hover"))
} else {
}
}
```

```{r}
#| fill: false
#| title: "Highly popular papers"
tableOutput('HI_papers_table')
```




# Open Science {orientation="columns"}

## Column1 {width=33%}

```{r prereg}
#| context: server

output$prereg <- renderPlotly({
  prereg_tab <- table(applicant()$pubs$P_Preregistration2) |> as.data.frame() %>%
    mutate(perc = round(Freq*100/sum(Freq)))
  
  # give missing categories a minimal width to make them visible
  #prereg_tab$perc[prereg_tab$perc == 0] <- 0.2
  
  BC_h(
    cat_labels=prereg_tab$Var1,
    values=prereg_tab$Freq,
    colors=c("#eeeeee", "#FED976", "#90c916", "#008000"), rev=TRUE)
})
```
```{r prereg_plot}
#| title: "Was the research preregistered / a registered report?"
#| fig-width: 10
#| fig-height: 4
plotlyOutput('prereg')
```



```{r prereg_repl}
#| context: server

output$prereg_repl <- renderPlotly({
  if (!is.null(applicant()$pubs$P_PreregisteredReplication)) {
  
  repl_tab <- table(applicant()$pubs$replication) |> as.data.frame() %>%
    mutate(perc = round(Freq*100/sum(Freq)))
  
  # TODO: rev does not work yet
  BC_h(
    cat_labels=repl_tab$Var1,
    values=repl_tab$Freq,
    colors=c("#eeeeee", "#FED976", "#90c916", rev=TRUE)
  )
  }
})
```
```{r prereg_repl_plot}
#| title: "Preregistered replication attempt"
#| fig-width: 10
#| fig-height: 4
plotlyOutput('prereg_repl')
```


# Raw data

```{r raw_data}
#| context: server

output$raw_data <- renderPrint({
  applicant()
})
```
```{r raw_data_output}
verbatimTextOutput("raw_data")
```
